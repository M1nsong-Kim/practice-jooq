/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables;


import com.practice.practice_jooq.generated.Jooq;
import com.practice.practice_jooq.generated.Keys;
import com.practice.practice_jooq.generated.enums.PurchaseStatus;
import com.practice.practice_jooq.generated.tables.records.PurchaseRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchase extends TableImpl<PurchaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.purchase</code>
     */
    public static final Purchase PURCHASE = new Purchase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseRecord> getRecordType() {
        return PurchaseRecord.class;
    }

    /**
     * The column <code>jooq.purchase.count</code>.
     */
    public final TableField<PurchaseRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq.purchase.id</code>.
     */
    public final TableField<PurchaseRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.purchase.purchase_id</code>.
     */
    public final TableField<PurchaseRecord, Integer> PURCHASE_ID = createField(DSL.name("purchase_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq.purchase.register_dtm</code>.
     */
    public final TableField<PurchaseRecord, LocalDateTime> REGISTER_DTM = createField(DSL.name("register_dtm"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>jooq.purchase.updater_dtm</code>.
     */
    public final TableField<PurchaseRecord, LocalDateTime> UPDATER_DTM = createField(DSL.name("updater_dtm"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>jooq.purchase.product_id</code>.
     */
    public final TableField<PurchaseRecord, String> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq.purchase.register</code>.
     */
    public final TableField<PurchaseRecord, String> REGISTER = createField(DSL.name("register"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq.purchase.updater</code>.
     */
    public final TableField<PurchaseRecord, String> UPDATER = createField(DSL.name("updater"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq.purchase.status</code>.
     */
    public final TableField<PurchaseRecord, PurchaseStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(9).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)).asEnumDataType(com.practice.practice_jooq.generated.enums.PurchaseStatus.class), this, "");

    private Purchase(Name alias, Table<PurchaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purchase(Name alias, Table<PurchaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.purchase</code> table reference
     */
    public Purchase(String alias) {
        this(DSL.name(alias), PURCHASE);
    }

    /**
     * Create an aliased <code>jooq.purchase</code> table reference
     */
    public Purchase(Name alias) {
        this(alias, PURCHASE);
    }

    /**
     * Create a <code>jooq.purchase</code> table reference
     */
    public Purchase() {
        this(DSL.name("purchase"), null);
    }

    public <O extends Record> Purchase(Table<O> child, ForeignKey<O, PurchaseRecord> key) {
        super(child, key, PURCHASE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooq.JOOQ;
    }

    @Override
    public UniqueKey<PurchaseRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_PRIMARY;
    }

    @Override
    public Purchase as(String alias) {
        return new Purchase(DSL.name(alias), this);
    }

    @Override
    public Purchase as(Name alias) {
        return new Purchase(alias, this);
    }

    @Override
    public Purchase as(Table<?> alias) {
        return new Purchase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(String name) {
        return new Purchase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(Name name) {
        return new Purchase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(Table<?> name) {
        return new Purchase(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, Integer, LocalDateTime, LocalDateTime, String, String, String, PurchaseStatus> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super PurchaseStatus, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super PurchaseStatus, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
