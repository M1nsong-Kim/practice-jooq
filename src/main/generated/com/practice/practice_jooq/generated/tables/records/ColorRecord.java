/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables.records;


import com.practice.practice_jooq.generated.tables.Color;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ColorRecord extends UpdatableRecordImpl<ColorRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jooq.color.id</code>.
     */
    public ColorRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>jooq.color.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jooq.color.color_name</code>.
     */
    public ColorRecord setColorName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jooq.color.color_name</code>.
     */
    public String getColorName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq.color.product_id</code>.
     */
    public ColorRecord setProductId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jooq.color.product_id</code>.
     */
    public String getProductId() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Color.COLOR.ID;
    }

    @Override
    public Field<String> field2() {
        return Color.COLOR.COLOR_NAME;
    }

    @Override
    public Field<String> field3() {
        return Color.COLOR.PRODUCT_ID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getColorName();
    }

    @Override
    public String component3() {
        return getProductId();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getColorName();
    }

    @Override
    public String value3() {
        return getProductId();
    }

    @Override
    public ColorRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ColorRecord value2(String value) {
        setColorName(value);
        return this;
    }

    @Override
    public ColorRecord value3(String value) {
        setProductId(value);
        return this;
    }

    @Override
    public ColorRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ColorRecord
     */
    public ColorRecord() {
        super(Color.COLOR);
    }

    /**
     * Create a detached, initialised ColorRecord
     */
    public ColorRecord(Integer id, String colorName, String productId) {
        super(Color.COLOR);

        setId(id);
        setColorName(colorName);
        setProductId(productId);
    }

    /**
     * Create a detached, initialised ColorRecord
     */
    public ColorRecord(com.practice.practice_jooq.generated.tables.pojos.Color value) {
        super(Color.COLOR);

        if (value != null) {
            setId(value.getId());
            setColorName(value.getColorName());
            setProductId(value.getProductId());
        }
    }
}
