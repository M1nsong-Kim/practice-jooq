/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables.records;


import com.practice.practice_jooq.generated.tables.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SizeRecord extends UpdatableRecordImpl<SizeRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jooq.size.id</code>.
     */
    public SizeRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>jooq.size.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>jooq.size.product_id</code>.
     */
    public SizeRecord setProductId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jooq.size.product_id</code>.
     */
    public String getProductId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq.size.size</code>.
     */
    public SizeRecord setSize(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jooq.size.size</code>.
     */
    public String getSize() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Size.SIZE.ID;
    }

    @Override
    public Field<String> field2() {
        return Size.SIZE.PRODUCT_ID;
    }

    @Override
    public Field<String> field3() {
        return Size.SIZE.SIZE_;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getProductId();
    }

    @Override
    public String component3() {
        return getSize();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getProductId();
    }

    @Override
    public String value3() {
        return getSize();
    }

    @Override
    public SizeRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SizeRecord value2(String value) {
        setProductId(value);
        return this;
    }

    @Override
    public SizeRecord value3(String value) {
        setSize(value);
        return this;
    }

    @Override
    public SizeRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SizeRecord
     */
    public SizeRecord() {
        super(Size.SIZE);
    }

    /**
     * Create a detached, initialised SizeRecord
     */
    public SizeRecord(Integer id, String productId, String size) {
        super(Size.SIZE);

        setId(id);
        setProductId(productId);
        setSize(size);
    }

    /**
     * Create a detached, initialised SizeRecord
     */
    public SizeRecord(com.practice.practice_jooq.generated.tables.pojos.Size value) {
        super(Size.SIZE);

        if (value != null) {
            setId(value.getId());
            setProductId(value.getProductId());
            setSize(value.getSize());
        }
    }
}
