/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables;


import com.practice.practice_jooq.generated.Jooq;
import com.practice.practice_jooq.generated.Keys;
import com.practice.practice_jooq.generated.enums.StatsSalesByCategoryCategory;
import com.practice.practice_jooq.generated.tables.records.StatsSalesByCategoryRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatsSalesByCategory extends TableImpl<StatsSalesByCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.stats_sales_by_category</code>
     */
    public static final StatsSalesByCategory STATS_SALES_BY_CATEGORY = new StatsSalesByCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatsSalesByCategoryRecord> getRecordType() {
        return StatsSalesByCategoryRecord.class;
    }

    /**
     * The column <code>jooq.stats_sales_by_category.count</code>.
     */
    public final TableField<StatsSalesByCategoryRecord, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq.stats_sales_by_category.id</code>.
     */
    public final TableField<StatsSalesByCategoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.stats_sales_by_category.rate</code>.
     */
    public final TableField<StatsSalesByCategoryRecord, Integer> RATE = createField(DSL.name("rate"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq.stats_sales_by_category.category</code>.
     */
    public final TableField<StatsSalesByCategoryRecord, StatsSalesByCategoryCategory> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(7).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)).asEnumDataType(com.practice.practice_jooq.generated.enums.StatsSalesByCategoryCategory.class), this, "");

    private StatsSalesByCategory(Name alias, Table<StatsSalesByCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatsSalesByCategory(Name alias, Table<StatsSalesByCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.stats_sales_by_category</code> table
     * reference
     */
    public StatsSalesByCategory(String alias) {
        this(DSL.name(alias), STATS_SALES_BY_CATEGORY);
    }

    /**
     * Create an aliased <code>jooq.stats_sales_by_category</code> table
     * reference
     */
    public StatsSalesByCategory(Name alias) {
        this(alias, STATS_SALES_BY_CATEGORY);
    }

    /**
     * Create a <code>jooq.stats_sales_by_category</code> table reference
     */
    public StatsSalesByCategory() {
        this(DSL.name("stats_sales_by_category"), null);
    }

    public <O extends Record> StatsSalesByCategory(Table<O> child, ForeignKey<O, StatsSalesByCategoryRecord> key) {
        super(child, key, STATS_SALES_BY_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooq.JOOQ;
    }

    @Override
    public UniqueKey<StatsSalesByCategoryRecord> getPrimaryKey() {
        return Keys.KEY_STATS_SALES_BY_CATEGORY_PRIMARY;
    }

    @Override
    public StatsSalesByCategory as(String alias) {
        return new StatsSalesByCategory(DSL.name(alias), this);
    }

    @Override
    public StatsSalesByCategory as(Name alias) {
        return new StatsSalesByCategory(alias, this);
    }

    @Override
    public StatsSalesByCategory as(Table<?> alias) {
        return new StatsSalesByCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsSalesByCategory rename(String name) {
        return new StatsSalesByCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsSalesByCategory rename(Name name) {
        return new StatsSalesByCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsSalesByCategory rename(Table<?> name) {
        return new StatsSalesByCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, StatsSalesByCategoryCategory> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super StatsSalesByCategoryCategory, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super StatsSalesByCategoryCategory, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
