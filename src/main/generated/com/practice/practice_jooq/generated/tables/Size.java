/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables;


import com.practice.practice_jooq.generated.Jooq;
import com.practice.practice_jooq.generated.Keys;
import com.practice.practice_jooq.generated.tables.records.SizeRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Size extends TableImpl<SizeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.size</code>
     */
    public static final Size SIZE = new Size();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SizeRecord> getRecordType() {
        return SizeRecord.class;
    }

    /**
     * The column <code>jooq.size.id</code>.
     */
    public final TableField<SizeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.size.product_id</code>.
     */
    public final TableField<SizeRecord, String> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>jooq.size.size</code>.
     */
    public final TableField<SizeRecord, String> SIZE_ = createField(DSL.name("size"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

    private Size(Name alias, Table<SizeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Size(Name alias, Table<SizeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.size</code> table reference
     */
    public Size(String alias) {
        this(DSL.name(alias), SIZE);
    }

    /**
     * Create an aliased <code>jooq.size</code> table reference
     */
    public Size(Name alias) {
        this(alias, SIZE);
    }

    /**
     * Create a <code>jooq.size</code> table reference
     */
    public Size() {
        this(DSL.name("size"), null);
    }

    public <O extends Record> Size(Table<O> child, ForeignKey<O, SizeRecord> key) {
        super(child, key, SIZE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooq.JOOQ;
    }

    @Override
    public UniqueKey<SizeRecord> getPrimaryKey() {
        return Keys.KEY_SIZE_PRIMARY;
    }

    @Override
    public Size as(String alias) {
        return new Size(DSL.name(alias), this);
    }

    @Override
    public Size as(Name alias) {
        return new Size(alias, this);
    }

    @Override
    public Size as(Table<?> alias) {
        return new Size(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Size rename(String name) {
        return new Size(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Size rename(Name name) {
        return new Size(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Size rename(Table<?> name) {
        return new Size(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
