/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables.pojos;


import com.practice.practice_jooq.generated.enums.PurchaseStatus;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchase implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Integer count;
    private final Integer id;
    private final Integer purchaseId;
    private final LocalDateTime registerDtm;
    private final LocalDateTime updaterDtm;
    private final String productId;
    private final String register;
    private final String updater;
    private final PurchaseStatus status;

    public Purchase(Purchase value) {
        this.count = value.count;
        this.id = value.id;
        this.purchaseId = value.purchaseId;
        this.registerDtm = value.registerDtm;
        this.updaterDtm = value.updaterDtm;
        this.productId = value.productId;
        this.register = value.register;
        this.updater = value.updater;
        this.status = value.status;
    }

    public Purchase(
        Integer count,
        Integer id,
        Integer purchaseId,
        LocalDateTime registerDtm,
        LocalDateTime updaterDtm,
        String productId,
        String register,
        String updater,
        PurchaseStatus status
    ) {
        this.count = count;
        this.id = id;
        this.purchaseId = purchaseId;
        this.registerDtm = registerDtm;
        this.updaterDtm = updaterDtm;
        this.productId = productId;
        this.register = register;
        this.updater = updater;
        this.status = status;
    }

    /**
     * Getter for <code>jooq.purchase.count</code>.
     */
    public Integer getCount() {
        return this.count;
    }

    /**
     * Getter for <code>jooq.purchase.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Getter for <code>jooq.purchase.purchase_id</code>.
     */
    public Integer getPurchaseId() {
        return this.purchaseId;
    }

    /**
     * Getter for <code>jooq.purchase.register_dtm</code>.
     */
    public LocalDateTime getRegisterDtm() {
        return this.registerDtm;
    }

    /**
     * Getter for <code>jooq.purchase.updater_dtm</code>.
     */
    public LocalDateTime getUpdaterDtm() {
        return this.updaterDtm;
    }

    /**
     * Getter for <code>jooq.purchase.product_id</code>.
     */
    public String getProductId() {
        return this.productId;
    }

    /**
     * Getter for <code>jooq.purchase.register</code>.
     */
    public String getRegister() {
        return this.register;
    }

    /**
     * Getter for <code>jooq.purchase.updater</code>.
     */
    public String getUpdater() {
        return this.updater;
    }

    /**
     * Getter for <code>jooq.purchase.status</code>.
     */
    public PurchaseStatus getStatus() {
        return this.status;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Purchase other = (Purchase) obj;
        if (this.count == null) {
            if (other.count != null)
                return false;
        }
        else if (!this.count.equals(other.count))
            return false;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.purchaseId == null) {
            if (other.purchaseId != null)
                return false;
        }
        else if (!this.purchaseId.equals(other.purchaseId))
            return false;
        if (this.registerDtm == null) {
            if (other.registerDtm != null)
                return false;
        }
        else if (!this.registerDtm.equals(other.registerDtm))
            return false;
        if (this.updaterDtm == null) {
            if (other.updaterDtm != null)
                return false;
        }
        else if (!this.updaterDtm.equals(other.updaterDtm))
            return false;
        if (this.productId == null) {
            if (other.productId != null)
                return false;
        }
        else if (!this.productId.equals(other.productId))
            return false;
        if (this.register == null) {
            if (other.register != null)
                return false;
        }
        else if (!this.register.equals(other.register))
            return false;
        if (this.updater == null) {
            if (other.updater != null)
                return false;
        }
        else if (!this.updater.equals(other.updater))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.count == null) ? 0 : this.count.hashCode());
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.purchaseId == null) ? 0 : this.purchaseId.hashCode());
        result = prime * result + ((this.registerDtm == null) ? 0 : this.registerDtm.hashCode());
        result = prime * result + ((this.updaterDtm == null) ? 0 : this.updaterDtm.hashCode());
        result = prime * result + ((this.productId == null) ? 0 : this.productId.hashCode());
        result = prime * result + ((this.register == null) ? 0 : this.register.hashCode());
        result = prime * result + ((this.updater == null) ? 0 : this.updater.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Purchase (");

        sb.append(count);
        sb.append(", ").append(id);
        sb.append(", ").append(purchaseId);
        sb.append(", ").append(registerDtm);
        sb.append(", ").append(updaterDtm);
        sb.append(", ").append(productId);
        sb.append(", ").append(register);
        sb.append(", ").append(updater);
        sb.append(", ").append(status);

        sb.append(")");
        return sb.toString();
    }
}
