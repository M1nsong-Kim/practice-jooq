/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables;


import com.practice.practice_jooq.generated.Jooq;
import com.practice.practice_jooq.generated.Keys;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatsSalesByGender extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.stats_sales_by_gender</code>
     */
    public static final StatsSalesByGender STATS_SALES_BY_GENDER = new StatsSalesByGender();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>jooq.stats_sales_by_gender.count</code>.
     */
    public final TableField<Record, Integer> COUNT = createField(DSL.name("count"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq.stats_sales_by_gender.gender</code>.
     */
    public final TableField<Record, Integer> GENDER = createField(DSL.name("gender"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>jooq.stats_sales_by_gender.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jooq.stats_sales_by_gender.rate</code>.
     */
    public final TableField<Record, Integer> RATE = createField(DSL.name("rate"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

    private StatsSalesByGender(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private StatsSalesByGender(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.stats_sales_by_gender</code> table reference
     */
    public StatsSalesByGender(String alias) {
        this(DSL.name(alias), STATS_SALES_BY_GENDER);
    }

    /**
     * Create an aliased <code>jooq.stats_sales_by_gender</code> table reference
     */
    public StatsSalesByGender(Name alias) {
        this(alias, STATS_SALES_BY_GENDER);
    }

    /**
     * Create a <code>jooq.stats_sales_by_gender</code> table reference
     */
    public StatsSalesByGender() {
        this(DSL.name("stats_sales_by_gender"), null);
    }

    public <O extends Record> StatsSalesByGender(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, STATS_SALES_BY_GENDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooq.JOOQ;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_STATS_SALES_BY_GENDER_PRIMARY;
    }

    @Override
    public StatsSalesByGender as(String alias) {
        return new StatsSalesByGender(DSL.name(alias), this);
    }

    @Override
    public StatsSalesByGender as(Name alias) {
        return new StatsSalesByGender(alias, this);
    }

    @Override
    public StatsSalesByGender as(Table<?> alias) {
        return new StatsSalesByGender(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsSalesByGender rename(String name) {
        return new StatsSalesByGender(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsSalesByGender rename(Name name) {
        return new StatsSalesByGender(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StatsSalesByGender rename(Table<?> name) {
        return new StatsSalesByGender(name.getQualifiedName(), null);
    }
}
