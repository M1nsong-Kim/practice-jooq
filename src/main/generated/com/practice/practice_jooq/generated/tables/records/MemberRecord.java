/*
 * This file is generated by jOOQ.
 */
package com.practice.practice_jooq.generated.tables.records;


import com.practice.practice_jooq.generated.tables.Member;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberRecord extends UpdatableRecordImpl<MemberRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>jooq.member.id</code>.
     */
    public MemberRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>jooq.member.id</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>jooq.member.password</code>.
     */
    public MemberRecord setPassword(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>jooq.member.password</code>.
     */
    public String getPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>jooq.member.name</code>.
     */
    public MemberRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>jooq.member.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>jooq.member.id_number</code>.
     */
    public MemberRecord setIdNumber(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>jooq.member.id_number</code>.
     */
    public String getIdNumber() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Member.MEMBER.ID;
    }

    @Override
    public Field<String> field2() {
        return Member.MEMBER.PASSWORD;
    }

    @Override
    public Field<String> field3() {
        return Member.MEMBER.NAME;
    }

    @Override
    public Field<String> field4() {
        return Member.MEMBER.ID_NUMBER;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getPassword();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getIdNumber();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getPassword();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getIdNumber();
    }

    @Override
    public MemberRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public MemberRecord value2(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public MemberRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public MemberRecord value4(String value) {
        setIdNumber(value);
        return this;
    }

    @Override
    public MemberRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MemberRecord
     */
    public MemberRecord() {
        super(Member.MEMBER);
    }

    /**
     * Create a detached, initialised MemberRecord
     */
    public MemberRecord(String id, String password, String name, String idNumber) {
        super(Member.MEMBER);

        setId(id);
        setPassword(password);
        setName(name);
        setIdNumber(idNumber);
    }

    /**
     * Create a detached, initialised MemberRecord
     */
    public MemberRecord(com.practice.practice_jooq.generated.tables.pojos.Member value) {
        super(Member.MEMBER);

        if (value != null) {
            setId(value.getId());
            setPassword(value.getPassword());
            setName(value.getName());
            setIdNumber(value.getIdNumber());
        }
    }
}
